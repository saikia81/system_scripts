#!/bin/python
import os,sys
import subprocess

# key-value store with settings and data
# including pkg databse 
class Database:
    """the data is stored as a list of pkgnames corresponding to a dictionary with information about the package"""
    def __init__i(data=None):
        if not data:
            data = {}
        try:
            with open("database.py", 'r') as database:
                data = database.readlines()
        except Exception as ex:
            print("[-] Error: " + repr(ex))
            populate_database()
        self.temp = data

    @staticmethod
    def find_packages(directory=''):
        # index all directories
        pakages = {}
        packages_in_dir = subprocess.Popen(['ls', directory], stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read().decode("utf-8")
        pacman_database = subprocess.Popen(['pacman', '-Q'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read().decode("utf-8")
        pacman_data = [pkg.split(" ") for pkg in pacman_database.split('\n')]
        packages.update({pkg:{'version': ver, 'database': pacman} for pkg, ver in pacman_data})

        return packages


    def populate_database():
        self.data.update(find_packages())


def init():
    try:
        os.mkdir(os.environ['HOME'] + '/AUR/')
    except FileExistsError:
        pass #folder should exist
    except Exception:
        print("[!] could not create or access ~/AUR/") #user should have a directory here!
        return False

    try:
        os.chdir(os.environ['HOME'] + '/AUR/')  # package manager default directory
    except FileNotFoundError:
        print("[!] could not access ~/AUR/")
        return False
        
    return True

# returns the found package or False
def find_tar_xz(name, dont_ask=False):
    for d in os.walk('{}/'.format(name)):
        for i in d[2]:
            if len(i) >= 6 and i[-6:] == 'tar.xz':
                 return (i)
    return False

def get_parameters():
    if len(sys.argv) == 2:
        return sys.argv[1]
    elif len(sys.argv) == 1:
        return input(" name > ")
    else:
        return sys.argv[1:]

def purge_pkg_dir(pkg_name):
    os.system("rm -d -R {}".format(pkg_name)) if input('remove old pkg (y/N)> ').lower() == 'y' else print('aborted\n')

def backup_pkg(pkg_name):
    pass
   
# return True if the package is updated
def download_pkg(pkg_name):
    output = subprocess.Popen(['git', 'pull'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read().decode("utf-8") 
    
    if 'no remote repository specified' in output.lower():
        print("\nCloning package: {}".format(pkg_name))
        os.system("git clone https://aur.archlinux.org/{}.git".format(pkg_name))
        return True
    elif 'not a git repository' in output.lower():
        print("\nCloning package: {}".format(pkg_name))
        os.system("git clone https://aur.archlinux.org/{}.git".format(pkg_name))
        return True
    elif 'already up-to-date' in output.lower():
        print("already UP-TO-DATE")
        return False
    elif 'files changed' in output.lower():
        print("[+]git repository updated!")
        return True
    return False
    
# make package with 'makepkg -sri'
# confirmation required
def make_pkg(pkg_name, dont_ask=False):
    if dont_ask == True:
        os.system("cd {}; makepkg -sri -f -c".format(pkg_name))
        return True
    print(\
"""
[W] Are you sure you want to install this package on you system? 
""")
    print("--- PKGBUILD {} ---".format(pkg_name))
    os.system("vim {}/PKGBUILD".format(pkg_name))
    
    if input("MAKE package? (y/N) ").lower() == 'y':
        os.system("cd {}; makepkg -sri -f -c".format(pkg_name))

def install_pkg(pkg_name, dont_ask=False):
    print("[!] only nescessary when package hasn't been installed by makepkg")
    tar_xz = False
    if input("\n install package? (y/N) ").lower() == 'y':
        tar_xz = find_tar_xz(pkg_name)
    
    if tar_xz:
        os.system("sudo pacman -U '{}/{}'".format(pkg_name, tar_xz))
    else:
        print("\nCould not find tar.xz package!")

def multiple_packages(pkg_names):
    for pkg_name in pkg_names:
        if download_pkg(pkg_name):
            print("[+] package downloaded: {}".format(pkg_name))
        else:
            print("[!] ERROR downloading package: {}".format(pkg_name))
        make_pkg(pkg_name)
        install_pkg(pkg_name)

def clean_package(pkg_name):
    pkg = find_tar_xz(pkg_name)
    if pkg != False:
        os.system("rm {}".format(pkg))
        return True
    else:
        return False


def main():
    if not init(): exit()
    params = get_parameters()
    if type(params) == list:
       multiple_packages(params)
       return 0
    else:
        pkg_name = params

    if download_pkg(pkg_name):
        print("[+] package downloaded!")
    else:
        print("[w] Nothing was downloaded")
        if input("\n continue? [Y/n] ").lower() == 'n': return
    make_pkg(pkg_name)
    install_pkg(pkg_name) #this is in case that making the package doesn't install it
            
if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt as ex:
        sys.exit(1)
